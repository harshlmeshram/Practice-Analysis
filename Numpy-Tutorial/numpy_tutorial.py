# -*- coding: utf-8 -*-
"""Numpy Tutorial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jrxJRqhqQRxx3DQyAUsCTShEdpiRD2ze

**Load in Numpy**
"""

import numpy as np
import sys

"""**The Basic**"""

a = np.array([1,2,3], dtype="int32")   #dtype change as per need like int16, int32, int64, etc.
print(a)

b = np.array([[1.0,3.0, 2.0], [7.0,8.0,9.0]])
print(b)

# get dimension

a.ndim

# get shape

a.shape

#get type

a.dtype

#get size

a.itemsize

# get total size

a.size * a.itemsize

a.nbytes

"""**Accessing/Changing specific elements, rows, columns, etc**"""

a = np.array([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14]])
print(a)

a.shape

#Get a specific element [r, c]

a[1, 5]

# Get a specific row

a[0, :]

# Get a specific column

a[:, 2]

# Getting a little more fancy [startindex:endindex:stepsize]

a[0, 1:-1:2]

a[1, 5] = 20
#print(a)

a[:, 2] = [1,2]
print(a)

"""**3-d example**"""

b = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
print(b)

# Get specific element (work outside in)

b[0,1,1]

#b[:,1,:]

# replace

b[:,1,:] =[[9,9], [8,8]]

print(b)

"""**Initializing Different Types of Arrays**"""

# All 0s matrix

np.zeros((2,3))

# All 1s matrix

np.ones((4,2,2), dtype='int32')

# Any other number

np.full((2,2), 99)

# Any other number (full_like)

np.full_like(a, 4)

# Random decimal numbers

np.random.rand(4,2)

# Random Integer value

np.random.randint(7, size=(3,3))

# The identity matrix

np.identity(5)

# Repeat an array

arr = np.array([[1,2,3]])
r1 = np.repeat(arr,3,axis=0)
print(r1)

output = np.ones((5,5))
print(output)

z = np.zeros((3,3))
z[1,1] = 9
print(z)

output[1:-1, 1:-1] = z
print(output)

#Be careful when copying arrays!!!

a = np.array([1,2,3])
#b=a
b=a.copy()
b[0] = 100

print(a)

"""**Mathematics**"""

a = np.array([1,2,3,4])
print(a)

a + 2

a - 2

a * 2

a / 2

b = np.array([1,0,1,0])
a + b

a ** 2

# Take the sin

np.sin(a)

np.cos(a)

# For a lot more (https://docs.scipy.org/doc/numpy/reference/routines.math.html)

"""**Linear Algebra**"""

a = np.ones((2, 3))
print(a)

b = np.full((3,2), 2)
print(b)


np.matmul(a,b)

# Find the determinant

c =np.identity(3)
np.linalg.det(c)

## Reference docs (https://docs.scipy.org/doc/numpy/reference/routines.linalg.html)

# Determinant
# Trace
# Singular Vector Decomposition
# Eigenvalues
# Matrix Norm
# Inverse
# Etc...

"""**Statistics**"""

stats = np.array([[1,2,3], [5,6,7]])
stats
#print(stats)

np.min(stats)

np.max(stats, axis=1)

np.sum(stats, axis=0)

"""**Reorganizing Arrays**"""

before = np.array([[1,2,3,4], [5,6,7,8]])
print(before)

after = before.reshape((2,2,2))
#after = before.reshape((2,3))
print(after)

# Vertically stacking vectors

v1 = np.array([1,2,3,4])
v2 = np.array([5,6,7,8])

np.vstack([v1, v2, v1, v2])

# Horizontal  stack

h1 = np.ones((2,4))
h2 = np.ones((2,2))

np.hstack((h1,h2))

"""**Miscellaneous**


**Load Data from File**
"""

filedata = np.genfromtxt('data.txt', delimiter=',')
filedata = filedata.astype('int32')
print(filedata)

"""**Boolean Masking and Advanced Indexing**"""

(~((filedata > 50) & (filedata < 100)))